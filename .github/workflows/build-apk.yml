name: Build APK

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          python3-pip python3-setuptools python3-venv git \
          openjdk-17-jdk zip unzip build-essential autoconf automake libtool autoconf-archive pkg-config

    - name: Update git submodules
      run: git submodule update --init --recursive

    - name: Create virtual environment
      run: python3 -m venv venv

    - name: Activate venv and install Buildozer
      run: |
        source venv/bin/activate
        pip install --upgrade pip
        pip install buildozer cython setuptools

    - name: Run Buildozer once to generate platform folder
      run: |
        source venv/bin/activate
        buildozer android debug || true

    - name: Patch libffi macros
      run: |
        echo "🔧 Ищем configure.ac и патчим LT_SYS_SYMBOL_USCORE..."
        FILES=$(find .buildozer/android/platform -name "configure.ac")
        if [ -z "$FILES" ]; then
          echo "⚠️ configure.ac не найден — патч не применён"
        else
          echo "✅ Найдено $(echo "$FILES" | wc -l) файл(ов) — вносим правки..."
          echo "$FILES" | while read FILE; do
            sed -i '1im4_pattern_allow([^LT_SYS_SYMBOL_USCORE$])' "$FILE"
            echo "  🔧 Пропатчен: $FILE"
          done
          echo "🎉 Патч успешно применён"
        fi

    - name: Patch all pyjnius files (long → int)
      run: |
        echo "🔧 Ищем pyjnius .pxi/.pyx файлы и патчим (long -> int)..."
        FILES=$(find .buildozer -type f -path "*/pyjnius/*" \( -name "*.pxi" -o -name "*.pyx" \) -print)
        if [ -z "$FILES" ]; then
          echo "⚠️ Файлы pyjnius не найдены в .buildozer — возможно, первый buildozer не докачал зависимости."
        else
          echo "✅ Найдено файлов:"
          echo "$FILES"
          while IFS= read -r f; do
            [ -z "$f" ] && continue
            echo "  🔧 Патчим: $f"
            # основные безопасные замены
            sed -i 's/isinstance(arg, long)/isinstance(arg, int)/g' "$f" || true
            sed -i 's/isinstance(py_arg, (int, long))/isinstance(py_arg, int)/g' "$f" || true
            sed -i -E "s/isinstance\(([^\),]+),\s*\(int,\s*long\)\)/isinstance(\1, int)/g" "$f" 2>/dev/null || true
            sed -i 's/(int, long)/(int)/g' "$f" || true
            sed -i 's/, long\)/)/g' "$f" || true
            sed -i 's/,\s*long\]/]/g' "$f" || true
          done <<< "$FILES"
          echo "🎉 Патчирование pyjnius завершено."
        fi
        echo "🔎 Проверка: оставшиеся упоминания 'long' в pyjnius (первые 50 строк):"
        grep -R --line-number --color=always "long" .buildozer | head -n 50 || echo "✅ Не найдено явных упоминаний 'long' в .buildozer (или output пуст)."

    - name: Build APK (second run)
      run: |
        source venv/bin/activate
        buildozer android debug

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: TestApp-APK
        path: bin/*.apk
