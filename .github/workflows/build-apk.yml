name: Build APK

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install system dependencies
      run: |
        sudo apt update
        sudo apt install -y \
          python3-pip python3-setuptools python3-venv git \
          openjdk-17-jdk zip unzip build-essential autoconf automake libtool autoconf-archive pkg-config

    - name: Update git submodules
      run: git submodule update --init --recursive

    - name: Create virtual environment
      run: python3 -m venv venv

    - name: Activate venv and install Buildozer
      run: |
        source venv/bin/activate
        pip install --upgrade pip
        pip install buildozer cython setuptools

    - name: Run Buildozer once to generate platform folder
      run: |
        source venv/bin/activate
        buildozer android debug || true

    - name: Patch libffi macros
      run: |
        echo "üîß –ò—â–µ–º configure.ac –∏ –ø–∞—Ç—á–∏–º LT_SYS_SYMBOL_USCORE..."
        FILES=$(find .buildozer/android/platform -name "configure.ac")
        if [ -z "$FILES" ]; then
          echo "‚ö†Ô∏è configure.ac –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø–∞—Ç—á –Ω–µ –ø—Ä–∏–º–µ–Ω—ë–Ω"
        else
          echo "‚úÖ –ù–∞–π–¥–µ–Ω–æ $(echo "$FILES" | wc -l) —Ñ–∞–π–ª(–æ–≤) ‚Äî –≤–Ω–æ—Å–∏–º –ø—Ä–∞–≤–∫–∏..."
          echo "$FILES" | while read FILE; do
            sed -i '1im4_pattern_allow([^LT_SYS_SYMBOL_USCORE$])' "$FILE"
            echo "  üîß –ü—Ä–æ–ø–∞—Ç—á–µ–Ω: $FILE"
          done
          echo "üéâ –ü–∞—Ç—á —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω"
        fi

    - name: Patch all pyjnius files (robust, Python)
      run: |
        echo "üîß Robust patch: replacing Python2 'long' usages in pyjnius files..."
        python3 - <<'PY'
        import re, sys
        from pathlib import Path

        root = Path('.buildozer')
        if not root.exists():
            print("‚ö†Ô∏è .buildozer not found, skipping pyjnius patch")
            sys.exit(0)

        targets = [p for p in root.rglob('*') if ('/pyjnius/' in str(p) or '\\pyjnius\\' in str(p)) and p.suffix in ('.pxi', '.pyx', '.py')]
        if not targets:
            print("‚ö†Ô∏è No pyjnius .pxi/.pyx/.py files found ‚Äî maybe first buildozer run didn't download them yet.")
            sys.exit(0)

        patched = []
        for p in targets:
            try:
                text = p.read_text(encoding='utf-8', errors='ignore')
            except Exception as e:
                print(f"‚ö†Ô∏è Could not read {p}: {e}")
                continue
            orig = text

            text = re.sub(r'isinstanceÓÄÅ\s*arg\s*,\s*long\s*ÓÄÅ', 'isinstance(arg, int)', text)
            text = re.sub(r'isinstanceÓÄÅ\s*py_arg\s*,\s*\(\s*int\s*,\s*long\s*ÓÄÅ\s*\)', 'isinstance(py_arg, int)', text)
            text = re.sub(r'isinstanceÓÄÅ\s*([^ÓÄÅ,]+?)\s*,\s*ÓÄÅ\s*int\s*,\s*long\s*ÓÄÅ\s*\)', r'isinstance(\1, int)', text)
            text = re.sub(r'ÓÄÅ\s*int\s*,\s*long\s*ÓÄÅ', '(int)', text)
            text = re.sub(r',\s*long\)', ')', text)
            text = re.sub(r',\s*long\]', ']', text)
            text = re.sub(r'ÓÄÅint,longÓÄÅ', '(int)', text)

            if text != orig:
                try:
                    p.write_text(text, encoding='utf-8')
                    patched.append(str(p))
                except Exception as e:
                    print(f"‚ö†Ô∏è Could not write {p}: {e}")

        if patched:
            print("‚úÖ Patched files:")
            for f in patched:
                print("  -", f)
        else:
            print("‚ÑπÔ∏è No files required patching.")

        print("\nüîé Remaining 'long' occurrences inside pyjnius (first 50 results):")
        count = 0
        for p in root.rglob('*'):
            if ('/pyjnius/' in str(p) or '\\pyjnius\\' in str(p)) and p.is_file():
                try:
                    lines = p.read_text(encoding='utf-8', errors='ignore').splitlines()
                except Exception:
                    continue
                for i,l in enumerate(lines,1):
                    if 'long' in l:
                        print(f"{p}:{i}: {l.strip()}")
                        count += 1
                        break
                    if count >= 50:
                        break
        if count == 0:
            print("‚úÖ No obvious 'long' occurrences left in pyjnius files (first-pass check).")
        PY

    - name: Build APK (second run)
      run: |
        source venv/bin/activate
        buildozer android debug

    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: TestApp-APK
        path: bin/*.apk
